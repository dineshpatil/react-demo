{"version":3,"sources":["card/card.component.jsx","card-list/card-list.component.jsx","search/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","Search","type","placeholder","onChange","e","handleOnSearch","App","console","log","target","value","setState","searchString","state","fetch","then","response","json","users","this","filteredList","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAIaA,G,MAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCKfC,G,MATE,SAAAR,GACb,OAAO,sBAAKC,UAAU,YAAf,6BACHD,EAAMS,SAASC,KAAK,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,YCLhBM,G,MAAS,SAACX,GACnB,OAAO,uBAAQC,UAAU,aAAcW,KAAK,SAASC,YAAY,kBAAkBC,SAAU,SAACC,GAAD,OAAOf,EAAMgB,eAAeD,QCwC9GE,G,wDArCb,aAAe,IAAD,8BACZ,gBAcFD,eAAiB,SAACD,GAChBG,QAAQC,IAAIJ,EAAEK,OAAOC,OACrB,EAAKC,SAAS,CAAEC,aAAcR,EAAEK,OAAOC,SAdvC,EAAKG,MAAQ,CACXf,SAAU,GACVc,aAAc,IALJ,E,gEASO,IAAD,OAClBE,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEb,SAAUoB,S,+BAQnC,IAAD,EAC4BC,KAAKN,MAAhCf,EADD,EACCA,SAAUc,EADX,EACWA,aACZQ,EAAetB,EAASuB,QAAO,SAAA5B,GAAO,OAC1CA,EAAQE,KAAK2B,cAAcC,SAASX,EAAaU,kBAGnD,OACE,sBAAKhC,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CAAQe,eAAgBc,KAAKd,iBAC7B,cAAC,EAAD,CAAUP,SAAUsB,W,GA/BVI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.be92832d.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'\n\nexport const Card = props => {\n    return (\n        <div className='card-container'>\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h1>{props.monster.name}</h1>\n            <p>{props.monster.email}</p>\n        </div>\n    );\n}; \n","import React from 'react';\nimport {Card} from '../card/card.component'\n\nimport './card-list.styles.css'\n\nconst CardList = props => {\n    return <div className='card-list'>                {\n        props.monsters.map( monster => (\n          <Card key={monster.id} monster={monster}></Card>\n        ))\n      }\n</div>;\n}; \n\nexport default CardList;","import React from 'react'\nimport './search-box.styles.css'\n\nexport const Search = (props) => {\n    return <input  className=\"search-box\"  type='search' placeholder='Search Monsters' onChange={(e) => props.handleOnSearch(e)}></input>\n}","import { Component } from 'react';\nimport CardList from './card-list/card-list.component';\nimport { Search } from './search/search-box.component'\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchString: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  handleOnSearch = (e) => {\n    console.log(e.target.value);\n    this.setState({ searchString: e.target.value });\n  }\n\n  render() {\n    const { monsters, searchString } = this.state;\n    const filteredList = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchString.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters World</h1>\n        <Search handleOnSearch={this.handleOnSearch} />\n        <CardList monsters={filteredList}>\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}